<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Qian's Blog - Book</title><link href="https://qian-gu.github.io/" rel="alternate"></link><link href="https://qian-gu.github.io/feeds/book.atom.xml" rel="self"></link><id>https://qian-gu.github.io/</id><updated>2015-03-27T21:45:00+08:00</updated><subtitle>Read &gt;&gt; Think &gt;&gt; Write</subtitle><entry><title>不想当司机的厨子不是好码农 —— 读《浪潮之巅》</title><link href="https://qian-gu.github.io/posts/book/on-top-of-tides-review.html" rel="alternate"></link><published>2015-03-27T21:45:00+08:00</published><updated>2015-03-27T21:45:00+08:00</updated><author><name>Qian Gu</name></author><id>tag:qian-gu.github.io,2015-03-27:/posts/book/on-top-of-tides-review.html</id><summary type="html">&lt;p&gt;以前在 CSDN 上面写下的胡言乱语，现在看来最大的感触当时怎么那么天真，或者说 幼稚...&lt;/p&gt;</summary><content type="html">&lt;p&gt;暑假加上开学的一段时间看完了《浪潮之巅》，感触颇大 ... 好不容易等到期末放假回家了，记录下一点笔记，希望几年之后毕业的时候还可以坚持这份近乎无知的单纯，老子当年也是一腔热血，准备创业的人 -.-&lt;/p&gt;
&lt;h2 id="_1"&gt;关于作者&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;作者吴军，男，清华大学计算机系（本科）和电子工程系（硕士），并于 1993-1996 年在清华任讲师。他于 1996 年起在美国约翰霍普金斯大学攻读博士，并于 2002 年获得计算机科学博士学位。在清华和约翰霍普金斯大学期间，吴军博士致力于语音识别、自然语言处理，特别是统计语言模型的研究。他曾获得 1995 年的全国人机语音智能接口会议的最佳论文奖和 2000 年 Eurospeech 的最佳论文奖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是书封面内侧的作者介绍，同时我找到了他在 Google 上的&lt;a href="https://sites.google.com/site/junwu02"&gt;个人主页&lt;/a&gt;。不得不说同样是人，同样是学生，人和人的差距怎么这么大呢？&lt;/p&gt;
&lt;p&gt;人生就是不停在分岔路口进行选择，而且，根据前面的选择，后来可以面对的选择也是不同的（不知道是否满足马尔科夫性 ...），只是，有的人越走越 nb，而有的人则走偏了，成为了逗 b。大家都是从小学开始，有的人从小就是乖孩子，用现在流行的话说就是 “ 别人家的孩子 ”，学习好，嘴巴甜。什么老师、家长、叔叔、阿姨都喜欢的要死；而有的人打架，跷课，是个 “ 问题王 ”。不过，我觉得小时候还是调皮一点比较好，人生苦短，抓紧时间玩耍才好。借用吴军博士在个人主页上的一句话&lt;strong&gt;“ 我不喜欢做什么，由于生命有限，很多不重要的事只好不做了。”&lt;/strong&gt; 只是，他把节省下来的时间学习，钻研，而我却用来玩，甚至现在还在玩，自责 ing...&lt;/p&gt;
&lt;p&gt;貌似扯的越来越远，严重跑题了。对不起我的语文老师啊&lt;/p&gt;
&lt;p&gt;总之，一句话，NB 的人各有各的 NB，而逗 B 们大体都有相似的硬伤，比如 IQ or EQ。已经走错 N 次路口的我们还有救，能做的就是学习 NB 的人为何这么牛，然后尽量变得和他们一样牛，至少不再那么逗 B。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;浪潮之巅&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;近一百多年来，总有些公司很幸运地、有意识或无意识地站在技术革命的浪尖之上。一旦处在了那个位置，即使不做任何事情，也可以集随波浪顺顺当当地向前漂十几年，甚至更长的时间。在这十几年到几十年间，它们代表着科技的浪巅，直到下一波浪巅的来临。从一百多年前算起，AT&amp;amp;T、IBM 公司、苹果（Apple）公司、英特尔（Intel）公司、微软（Microsoft）公司、思科（Cisco）公司、雅虎（Yahoo!）公司和 Google 公司，或许还有接下来的 Facebook 公司，都先后被幸运地推倒了浪尖。&lt;br&gt;
......&lt;br&gt;
虽然对于一个公司来讲，赶上一次浪潮不能保证它长盛不衰，但是，对于一个人来讲，一生赶上这样的一次浪潮就够了。对于一个弄潮的年轻人来讲，最幸运的莫过于赶上一波浪潮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看完了《浪潮之巅》，作为职业码农，表示收获很大。我对于 AT&amp;amp;T、IBM 公司的认识不再那么肤浅，他们经历的兴衰成败，取得今天的成就是多么的不容易；了解了 IT 领域的罗马帝国 —— 微软公司是如何在十几年间建成罗马的；纵观摩托罗拉、雅虎、SUN、网景等公司的历史，知道了现实中的差之毫厘，失之千里，为他们与机会失之交臂而扼腕叹息 ... &lt;/p&gt;
&lt;p&gt;总结以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我想通了 CEO 的工资那么高的原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前总觉得当 CEO 最舒服了，不用思考那些很枯燥的技术问题，每天开会吃饭就能挣到可观的收入，而且走到哪都受人尊敬。现在明白了其实并不是这样，其实他们的压力更大，当好一名 CEO 的难度很大，他们肩负着更大的责任，他们得设计整个公司的战略，同时对股东和员工们负责，所以高薪是他们应得的。一个工程师在技术上的失误可以通过各种方法来补救，但是一个不乘职的 CEO 会毁掉一家公司，机会都是给有准备的人的，一旦失去，很难遇到下次。纵观书里面的公司，他们大多经历过低谷和巅峰，当 CEO 决策失误时，有可能导致公司由巅峰走向低谷，甚至破产。这时候，如果遇到一个英明乘职的 CEO，他们可以把公司从破产的边缘挽救回来，比如惠普公司的 CEO 马克 · 赫德，GE 公司的韦尔奇，IBM 的郭士纳等等，而遇到一个糟糕的 CEO，那只能准备关门或者别人来收购了 ...&lt;/p&gt;
&lt;p&gt;乔布斯在库比蒂诺市的议会上说他的目标不是在福布斯排行榜上排到多少名，或者有多大的名气，而是想办一家传奇公司，这家公司可以一直长盛不衰，比如像惠普一样。排除他恭维市政府官员的因素，根据《乔布斯传》来看，他看中的的确不是金钱和名利。自从他去世，人们就在不停的讨论苹果公司是不是在走下坡路，甚至什么时候衰败为可以被别人收购的二流公司，一如当年乔布斯离开的时候。作为 “ 伪果粉 ” 但愿苹果还能保持他们的独特的魅力。可见成为一名英明的 CEO 是多么的艰难，CEO 对公司又是多么的重要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机工业的生态链&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IT 产业是不断变化的，并且有着它自身发展规律，这些规律被总结成为定律（IT Lows）。以前只知道摩尔定律（Moore's Low），最想不通的一件事就是为什么芯片的集成度每 18 个月就翻一番，而我的电脑却越来越慢，甚至不如 n 年以前的电脑。现在知道了安迪 - 比尔定律（Andy and Bill's Low），终于明白了为什么微软的系统越做越臃肿，为什么现在的程序员们不像以前那么精打细算了。用户很反感新软件把硬件提升带来的好处几乎全部消耗光，但是，各个硬件厂商恰恰是靠软件开发商用光自己提供的硬件资源而得以生存，否则就没人愿意花钱买新机器了，旧的已经满足需求了。&lt;/p&gt;
&lt;p&gt;了解了产业链结构，许多以前想不通的事也就变得顺理成章。自身的知识决定了眼界啊。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司运作方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在搞技术的人眼中，运作公司，搞金融和财务是一件和编代码完全不同的事，应该有很深的门道在里面，很容易产生一种想法：“ 学技术的人都有着不同程度的自闭倾向，我更适合和机器打交道。我不是学管理和财务的，创业、办公司这种事和我绝缘。” 至少以前我一直是这么认为的。虽然这本书在介绍公司制度，运作方式等方面不是很全面也不权威，但是它给我最深的印象就是 “ 搞技术的人也可以办公司，而且可以办的很好 ”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;科学家在人们心目中一直是带着厚厚镜片，言语木讷，不食人间烟火，在英语中叫 Nerd。其实不然，书中很多我们看到的科学家，都是商业上非常敏锐的人，而很多商业巨子，自己就是科学家。  &lt;/p&gt;
&lt;p&gt;人的商业知识和眼光不是天生的，需要不断地、有心地学习。Google 早期的时候，创始人拉里 · 佩奇经常一边和我们一起吃饭，一边研究着某个公司的财务报告，一边和我们谈他的体会。Google 不少早期的员工后来成了成功的创始人和投资人，其中包括 Twitter 的创始人威廉姆斯。而佩奇自己也从一个技术专家成长为商业奇才。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一家典型的美国科技公司的成长史，一般都是创始人有着独特的技术或者眼光、点子，和好朋友合伙办一家小公司，然后逐渐成长，自己主动去找风投或者做的足够好，风投主动找他们，然后公司规模越来越大，成立董事会，寻找合适的 CEO，接着就是上市 IPO 等等。不知道在中国办公司是什么样子的呢？以后得多看点别的书，涨姿势了 ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商业模式、公司基因、中国、天使投资&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于创业，书里面有一个很重要的概念就是 “ 商业模式 ”。比如你准备去找红杉资本，对方首先就问你的商业模式是什么，如果在 5 分钟之内还是解释不清，估计也就没有机会了。商业模式一定要简单，不能太复杂。喝多公司的成功其实是商业模式的成功，比如 Dell 的 “ 直销模式 ” 和 Google 的广告商业模式等等。可以说，一个好的商业模式就是一台印钞机。&lt;/p&gt;
&lt;p&gt;还有就是 “ 公司基因 ”，这个很大程度上由创始人和他们的业务决定的。有的公司基因中就存在着创新，比如 3M 公司，Google 等，他们可以很快的转型，做出更多的产品，保持公司的业绩；而有的公司则天生没有这种基因，比如 “ 蓝色巨人 ” IBM，他们以大型机、系统和服务为核心，很难在 PC 市场获得成功。&lt;/p&gt;
&lt;p&gt;作为金融小白，只知道红杉资本，KPCB 等有名的 VC，而国内的则不是很了解了，只知道李开复、薛蛮子、雷军、王啸等人。我们学校毕业没有找工作而去创业的人不是没有，但是也不多。考虑到大环境，我觉得应该还是不错的。作为一个 211，连 985 都不是的学校，而且学校的状况真的是每况愈下，真的替学校捉鸡，毕竟，母校就是一个自己可以随意嫌弃，但是别人不能说一句不好的地方。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;因为不想写报告，闲的无聊才写的，没想到我竟然这么能扯。此刻还有大干一番事业的雄心壮志，所谓出生牛犊不怕虎，估计到毕业的时候了解的多了，也就没有那个胆量去创业了，找一份自认为还不错的工作，这辈子就奉献给郭嘉了 ...&lt;/p&gt;
&lt;p&gt;想想真的是 &lt;strong&gt;“ 我不喜欢做什么，由于生命有限，很多不重要的事只好不做了。”&lt;/strong&gt;，以后不能再这么浑浑噩噩下去了，找一些自己感兴趣的、重要的事，坚持做下去，每天进步一小点的感觉其实要比打游戏好的多。&lt;/p&gt;</content><category term="Book"></category><category term="review"></category><category term="On Top of Tides"></category></entry><entry><title>番茄工作法 总结 + 实践</title><link href="https://qian-gu.github.io/posts/book/the-pomodoro-technique-practices.html" rel="alternate"></link><published>2014-11-02T21:46:00+08:00</published><updated>2014-11-02T21:46:00+08:00</updated><author><name>Qian Gu</name></author><id>tag:qian-gu.github.io,2014-11-02:/posts/book/the-pomodoro-technique-practices.html</id><summary type="html">&lt;p&gt;总结 番茄工作法 的方法和实践。&lt;/p&gt;</summary><content type="html">&lt;p&gt;忙里偷闲，学习一下大名鼎鼎的 &lt;strong&gt;番茄工作法&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;番茄工作法 (&lt;a href="http://en.wikipedia.org/wiki/Pomodoro-Technique"&gt;Pomodoro Technique&lt;/a&gt;) 是由 Francesco Cirillo 创建的一种时间管理方法。他自己上大学时为了克服无法集中精力认真学习这个问题而发明了这种方法，后来他整理完成了一本书来介绍这种方法：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pomodorotechnique.com/book/"&gt;The Pomodoro Technique&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;"Pomodoro Technique" 这个名字起源于一种厨房用的、番茄形状的计时器，其中 &lt;code&gt;Pomodoro&lt;/code&gt; 是意大利语，意思是番茄。&lt;/p&gt;
&lt;p&gt;至于为什么是番茄工作法，而不是白菜工作法呢？这是因为 Francesco Cirillo 当时在厨房找到的那个计时器是番茄形状的 :P&lt;/p&gt;
&lt;p&gt;还有另外一本书，是另外一个人自己实践番茄工作法总结出来的经验，而且自己画了一些生动的插图和脑图在里面，很有帮助：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pomodoro-book.com/"&gt;Pomodoro Technique Illustrated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;首先，网上贴张别人总结好的 Mind Map ( 出处见水印 )：&lt;/p&gt;
&lt;p&gt;&lt;img alt="mm" src="/images/the-pomodoro-technique-practices/mind-map.jpg"&gt;&lt;/p&gt;
&lt;p&gt;番茄工作法非常简单，具有非常强的可操作性，这也是它能风靡世界的原因吧。&lt;/p&gt;
&lt;p&gt;番茄工作法一共包含 5 个步骤：&lt;/p&gt;
&lt;p&gt;&lt;img alt="five stage" src="/images/the-pomodoro-technique-practices/five-stages.png"&gt;&lt;/p&gt;
&lt;p&gt;其中有一些必须遵守的法则：&lt;/p&gt;
&lt;p&gt;&lt;img alt="rules" src="/images/the-pomodoro-technique-practices/rules.png"&gt;&lt;/p&gt;
&lt;p&gt;也可以用一张图总结出什么是番茄工作法：&lt;/p&gt;
&lt;p&gt;&lt;img alt="flow" src="/images/the-pomodoro-technique-practices/workflow.png"&gt;&lt;/p&gt;
&lt;p&gt;综上，找一只笔和几张纸，列出要完成的工作，然后设定计时器，开始工作！就这么简单。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id="my-practice"&gt;My Practice&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;GTD 和 pomodoro 可以相互补充，达到最好的效果：&lt;/p&gt;
&lt;p&gt;GTD 侧重项目之间的管理，通过收集、处理、组织，使我们胸有成竹，做到 mind like water；Pomodoro 则侧重时间管理，每天到底应该如何提高效率，通过和自己约定的倒计时，把一个个行动落实，把握生命中的每一分钟，全力以赴我们心中的梦，不经历风雨怎么能见彩虹（不对 ...）&lt;/p&gt;
&lt;h3 id="tools"&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;番茄法的工具（5 个）：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A pen&lt;/li&gt;
&lt;li&gt;A Kitchen Timer&lt;/li&gt;
&lt;li&gt;Activity Inventory Sheet&lt;/li&gt;
&lt;li&gt;Todo Today Sheet&lt;/li&gt;
&lt;li&gt;Record&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;GTD 的工具：（6 个）：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Project List&lt;/li&gt;
&lt;li&gt;Next Action List&lt;/li&gt;
&lt;li&gt;Waiting For List&lt;/li&gt;
&lt;li&gt;Someday / Maybe List&lt;/li&gt;
&lt;li&gt;Calendar&lt;/li&gt;
&lt;li&gt;Reminder / Memo&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，综合一下两者的优势，就有了下面的组合：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Project List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运用 GTD 的收集、整理的优势，把我们的长期目标放在这里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Someday / Maybe List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里放目前不紧急，将来某个时候会做的事。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Activity Inventory List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;短期目标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Todo Today List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计划每天做的事，一定要尽力完成（因为这是我们作出的承诺）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Calendar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有日历帮助，我们可以更好地计划、实现一件复杂的事。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reminder / Memo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录生活中的小事、杂事，某时的突发奇想。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A Pomodoro&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置一个番茄时间，开始做！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="tips"&gt;Tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;番茄的大小，根据我们自己的实际情况而定，不过一开始可以用默认的 25 mins，过一段时间后如果真的不适合自己再进行修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Todo Today List 内容一定要实际可行，根据自己平时完成的番茄总量、预估计任务量来安排，尽最大努力完成清单，因为这是我们对自己的承诺。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按时休息。有时候我们可能正在起劲的时候，番茄钟响了，这时候最好停下手头的工作（即使你正在编程的紧要关头，文思如泉涌，有个新想法正想试试），原因很简单，避免长时间的工作，现在的休息是为了之后更长时间、更有效率地工作。即使有个好点子，先把它写下来，等休息好了再来评估、实现这个想法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一定要严格遵守约定。类似 “ 破窗效应 ”，一旦我们有某次打破了番茄的规定，那么就很容易打破第二次、第三次。失去了约束力，这个方法也就没有作用了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考研的苦逼日子最大的收获就是学会了用 calendar + checklist 来规划自己的学习生活。计划好一个长期目标，精确到每天的任务，这样每天结束时，如果完成了心情真是不要太开心，如果没有完成则对第二天也是一个激励，要提高效率把前一天的补上。我的这个 “ 土 ” 方法现在看来就是 GTD + Pomodoro 的简化版，是时候好好改进一下了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="todo"&gt;TODO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Self Observation 非常重要！每天坚持完，留一个番茄来回顾自己这一天的收获和效率情况，这样我们会对自己有个清楚的认识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回顾收获&lt;/li&gt;
&lt;li&gt;制定第二天的计划&lt;/li&gt;
&lt;li&gt;分析、提高自己的效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category></entry><entry><title>GTD 书评 + 总结</title><link href="https://qian-gu.github.io/posts/book/getting-things-done-review.html" rel="alternate"></link><published>2014-10-30T12:51:00+08:00</published><updated>2014-10-30T12:51:00+08:00</updated><author><name>Qian Gu</name></author><id>tag:qian-gu.github.io,2014-10-30:/posts/book/getting-things-done-review.html</id><summary type="html">&lt;p&gt;总结 GTD 方法。&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近了解学习了 GTD，总结一下。&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;所谓 GTD 就是 &lt;a href="http://en.wikipedia.org/wiki/Getting-Things-Done"&gt;Getting Things Done&lt;/a&gt; 的缩写。最早有一个叫做 David Allen 的美国人写的一本书，名字就是 :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.cn/Getting-Things-Done-The-Art-of-Stress-Free-Productivity-%E6%88%B4%E7%BB%B4%C2%B7%E8%89%BE%E4%BC%A6/dp/0142000280/ref=sr-1-2?ie=UTF8&amp;amp;qid=1414465590&amp;amp;sr=8-2&amp;amp;keywords=getting+things+done"&gt;Getting Things Done: The Art of Stress-Free Productivity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他是 GTD 系统的发明人，主要介绍了时间和任务管理的相关方法，后来这套系统越来越流行，于是大家就把相关的方法、工具统称为 GTD。&lt;/p&gt;
&lt;p&gt;网上有很多介绍 GTD 方法论的博客：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gtdlife.com/"&gt;小强的时间管理博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gtdstudy.com/"&gt;学无止境 @ 一点一滴&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mifengtd.cn/"&gt;褪墨・时间管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些大多是专业的培训师之类的人写的博客，里面的内容很全面也很详细（总共可能有 100+ 的文章），但是阅读体验却不好。我想主要原因是他们作为培训师、讲师身份，只有复杂、系统地介绍才能衬托出他们的专业。而作为一个普通人，我相信很多人都体验都是：好大一碗成功学鸡汤 =.=&lt;/p&gt;
&lt;p&gt;所以，作为一个普通的学生、总结一下我在一周的空余时间内学习 GTD 的心得，保证简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;阅读 &lt;a href="http://www.amazon.cn/Getting-Things-Done-The-Art-of-Stress-Free-Productivity-%E6%88%B4%E7%BB%B4%C2%B7%E8%89%BE%E4%BC%A6/dp/0142000280/ref=sr-1-2?ie=UTF8&amp;amp;qid=1414465590&amp;amp;sr=8-2&amp;amp;keywords=getting+things+done"&gt;Getting Things Done: The Art of Stress-Free Productivity&lt;/a&gt;，还是英文版靠谱，网上的翻译质量实在无法恭维。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读几篇博客即可，主要是吸收、了解别人和自己的理解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总结（形式随意，如写 blog、画 mind map），实践应用！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id="gtd"&gt;GTD&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id="reason"&gt;Reason&lt;/h3&gt;
&lt;p&gt;现在的人的生活、工作压力都很大，如果没有一个有效的方法来组织管理自己的事物，会越忙越乱。&lt;/p&gt;
&lt;p&gt;比如作为一个学生，一想到自己的论文还没有头绪，项目也看不到希望，还有码农的编程技能没有完全 get，眼看就要毕业了，找工作的压力也逐渐越来越大，着急却越忙越乱，总有一些事盘旋在脑袋里，不经意间提醒你 “ 还有没有做好的事！”&lt;/p&gt;
&lt;p&gt;这时候，各种管理的方法就出现了，而 GTD 就是其中一种。&lt;/p&gt;
&lt;h3 id="aim"&gt;Aim&lt;/h3&gt;
&lt;p&gt;GTD 书里面最终目的就是帮助我们达到所谓的 “ 黑带 ” &lt;code&gt;black belt&lt;/code&gt; 级别，标志就是做到 “ 心静如水 ”  &lt;code&gt;Mind Like Water&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所谓心静如水，是从武学中借鉴过来的词（也就是功夫熊猫里面浣熊师父教给胖纸的武术家的追求 —— &lt;code&gt;inner peace&lt;/code&gt;），GTD 的目的就是通过这一套系统方法让我们达到这种境界：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;掌控一切，不慌不忙，全身心投入到每一件事中。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="workflow"&gt;Workflow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="workflow" src="/images/getting-things-done-review/workflow.png"&gt;&lt;/p&gt;
&lt;h3 id="methodology"&gt;Methodology&lt;/h3&gt;
&lt;p&gt;GTD 的方法其实并不高深，它实际上主要就是解决了两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;很多事之间该如何处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;某一件事该如何进行下去&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="horizontal-focus"&gt;Horizontal Focus&lt;/h4&gt;
&lt;p&gt;为了解决第一个问题，GTD 提出了 5 个横向管理方法 &lt;code&gt;horizontal five-stage method&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Collect&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把所有的 “ 原始材料 ”（&lt;code&gt;stuff&lt;/code&gt;）都收集（&lt;code&gt;collcet&lt;/code&gt;）到一个地方，比如一个货真价实的篮子，或者是文件夹、电脑上的某个文件夹中（或者它们的组合），这个地方就称为 &lt;code&gt;in-basket&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关键：一定要保证把所有的事全部收集起来，不能漏掉一个，这样我们就可以只专注于这个 in-basket，而不用考虑其他乱七八糟的东西。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;收集到 in-basket 之后，按照前面的 workflow 对其中的内容进行处理（&lt;code&gt;process&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;关键：按照顺序，一次一件事地进行分类处理，处理完之后不要放回 in-basket 中，有条理地进行可以避免重复工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organize&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前一步只是将 in-basket 中的内容进行了分类，但结果仍然是一堆事情的集合，这时候就需要我们将其组织管理（&lt;code&gt;organize&lt;/code&gt;）成各种有序的清单（&lt;code&gt;list&lt;/code&gt;），比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;项目清单（&lt;code&gt;project list&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日历（&lt;code&gt;calendar&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下一步行动清单（&lt;code&gt;next action list&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待清单（&lt;code&gt;waiting for list&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将来某时清单（&lt;code&gt;someday/may list&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键：建立一个 完备正交的分类集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Review&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在建立起各种清单之后，我们需要对其进行跟踪维护。根据事件的重要程度，每天、每周、每月、每年地不断坚持更新我们的清单。虽然简单，但也是最难做到的地方。或许 3 分钟热情可以持续一段时间，但是大多数人都没有恒心将一件事坚持下去。&lt;/p&gt;
&lt;p&gt;关键：恒心！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们清单都列好了，但是当我们每天在确切的某个时间做什么确切的事呢？GTD 并没有给出答案，毕竟某件事重不重要只有我们自己才知道。但是它给出了 3 个模型来对一件事情的重要、紧急情况进行评估，以便我们安排工作顺序。安排工作顺序可以按照不同的属性进行排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地点：宿舍、实验室、教室&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间：早中晚、工作日、周末&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;花费的精力：看书、编程、发邮件、整理文档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重要程度：人生目标、工作计划、当前工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，我觉得在 do 这个方面，或许其他的方法更有效，比如 “ 番茄工作法 ” 等可以帮助我们有效地安排工作时间，提高注意力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;就是这么简单，和我们平时自己琢磨出来的方法没有太大差别，这几个步骤的目的就是管理我们的工作，让我们不再是乱糟糟一团的感觉，而是 “ 清单在手，天下我有 ” 的掌控全局的感觉，这也是我们能进入 mind like water 状态的前提。&lt;/p&gt;
&lt;h4 id="vertical-focus"&gt;Vertical Focus&lt;/h4&gt;
&lt;p&gt;为了解决第二个问题，GTD 提出了 5 个纵向管理方法 &lt;code&gt;vertical five-phase method&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Defining purpose &amp;amp; principles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outcoming &amp;amp; visioning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainstorming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organizing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identifying next actions&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这几个步骤其实就是很自然而然的从上到下（&lt;code&gt;top to down&lt;/code&gt;）的方法：&lt;/p&gt;
&lt;p&gt;首先确定目标（&lt;code&gt;purpse &amp;amp; principles&lt;/code&gt;），避免盲目努力，然后再展望做完时的美好景象（&lt;code&gt;outcoming &amp;amp; visioning&lt;/code&gt;），这时候我们干劲十足，通过头脑风暴（&lt;code&gt;brainstorming&lt;/code&gt;）找到合适的工作方法，之后就是确切地组织（&lt;code&gt;organizing&lt;/code&gt;）人员，确认如何下手（&lt;code&gt;identifying next action&lt;/code&gt;），开始干活了了。&lt;/p&gt;
&lt;p&gt;步骤说起来空洞无味，但是在实际中面对不知如何下手的事情，可以参考这个步骤。关于如何做好一件事，涉及到不同的人和不同的工作类型，所以我认为这里的方法只能作为一个参考吧。&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;h3 id="tools"&gt;Tools&lt;/h3&gt;
&lt;p&gt;书里面还介绍了一些小技巧，就不再重复了。不过根据我的实践来看，工具其实也是一个至关重要的因素。&lt;/p&gt;
&lt;p&gt;选择标准：&lt;strong&gt;选择合适的而不是功能最全的工具。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在有很多 GTD 类的软件，比如 thinkrock、remember the milk、any.do 等等，功能很全很强大，但是我最终还是选择了简单的 &lt;em&gt;Google xxx + Evernote&lt;/em&gt; 的组合。&lt;/p&gt;
&lt;p&gt;什么是合适的工具呢，我认为只要满足&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;够用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个条件就好。&lt;/p&gt;
&lt;p&gt;简单的功能可以帮助我们集中注意力，Google 的很多产品都遵循这个原则，比如 Calendar、Task、Keep、Translate 等，而 Evernote 虽然功能强大，但是有时候让我无从下手，不想打开；当然关键功能必须要有，比如最近很火的一款应用 Todist，作为一款 todo list 类型的软件，免费版本却没有提醒功能，他们是有多想挣钱啊 =.=&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id="review"&gt;Review&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;这年头不可避免地看了一些成功学的书，喝了不少鸡汤，这本久负盛名，最近越来越火的书，从我的体验来说，比其他同类的书要好很多，还是有干货的。虽然没有给我非常的大的质的改变，但是也解决了不少我的疑惑。书里没有提出多么惊天动地的方法，很多都是我们日常生活中在使用的技巧，这本书把这些总结整理成一套系统方法，也算是一大成就吧。&lt;/p&gt;
&lt;p&gt;毕竟，实践才是检验真理的唯一标准，等过段时间再评价吧。&lt;/p&gt;
&lt;h2 id="my-gtd"&gt;My GTD&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;作为学生党的 GTD 实践：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Tools&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Project List&lt;/td&gt;
&lt;td&gt;Evernote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Daily Plan&lt;/td&gt;
&lt;td&gt;Evernote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Waiting For List&lt;/td&gt;
&lt;td&gt;Evernote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Someday/Mayble List&lt;/td&gt;
&lt;td&gt;Evernote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calendar&lt;/td&gt;
&lt;td&gt;Google Calendar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reminder &amp;amp; Memo&lt;/td&gt;
&lt;td&gt;Google Keep&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;说明一下选择 EN 的最大的理由：它的跨平台性，Windows + *nix + Andriod，基本涵盖了我校园（宿舍 + 实验室）的生活，至于 Google 就不用说了，Gmail + Calendar + Keep + Drive 的组合别说有多舒服了～&lt;/p&gt;
&lt;p&gt;关于 “Next Action List”，我个人觉得并不是特别适合我，就平时的事（学习 + 项目 + 杂事）而言，学习和项目很难用 Next Action 来做计划，而杂事都是一些鸡毛蒜皮的小事，用不着分步骤来完成。我每天都活动基本上是固定的，哪个时间段干什么早就形成了一种模式，所以我将 “Next Action List” 改为 “Daily Plan”。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id="mind-map"&gt;Mind Map&lt;/h2&gt;
&lt;p&gt;最后贴上一张我总结的 MM：&lt;/p&gt;
&lt;p&gt;&lt;img alt="gtd mm" src="/images/getting-things-done-review/gtd-mm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://snownow.cn/?p=1838"&gt;GTD | snow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://picasaweb.google.com/gudaost/MindMapper#5073109143800914274"&gt;MindMapper&lt;/a&gt;&lt;/p&gt;</content><category term="Book"></category><category term="GTD"></category><category term="review"></category></entry><entry><title>Code 书评</title><link href="https://qian-gu.github.io/posts/book/code-review.html" rel="alternate"></link><published>2014-03-21T16:33:00+08:00</published><updated>2014-03-21T16:33:00+08:00</updated><author><name>Qian Gu</name></author><id>tag:qian-gu.github.io,2014-03-21:/posts/book/code-review.html</id><summary type="html">&lt;p&gt;最近花了一个星期的时间，终于把 Code 看完了，感慨颇深。&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近花了一个星期的时间，终于把 &lt;a href="http://book.douban.com/subject/1494026/"&gt;&lt;em&gt;Code&lt;/em&gt;&lt;/a&gt; 看完了，看完全书，观后感总结出来就一个字 —— 爽～&lt;/p&gt;
&lt;p&gt;书名： &lt;a href="http://book.douban.com/subject/1494026/"&gt;&lt;em&gt;Code:  The Hidden Language of Computer Hardware and Software&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者： &lt;a href="http://charlespetzold.com/"&gt;Charles Petzold&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这本书的作者 &lt;a href="http://en.wikipedia.org/wiki/Charles-Petzold"&gt;Charles Petzold&lt;/a&gt; 是 Windows 编程界一位大师，世界顶级技术作家。1994 年 5 月，Petzold 作为仅有的七个人之一（并且是唯一的作家）被《Window Magazine》和 Microsoft 公司授予 “Windows Pioneer” 奖，以表彰他对 Microsoft Windows 的成功做出的贡献 。&lt;/p&gt;
&lt;p&gt;关于这本书的 “ 江湖地位 ” ，只需要来看看 stackoverflow 上的这个帖子就明白了：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read"&gt;What is the single most influential book every programmer should read?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本书排名在 &lt;em&gt;第 15&lt;/em&gt;，当然绝对排名没有很大的意义，但是也能说明本书的影响力 。另外本书号称 “ 完全不懂计算机的人也能看懂 ”... 如果这都不读，我不知道还有什么样的书值得我们去花费时间 : D&lt;/p&gt;
&lt;h2 id="_1"&gt;打通任督二脉&lt;/h2&gt;
&lt;p&gt;纵观程序员的 “ 武功秘籍 ”，不外乎两种：一种是讲 &lt;code&gt;道&lt;/code&gt;，另外一种是讲 &lt;code&gt;术&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;道&lt;/code&gt; 即 “ 道理 ”（真理），是脱离了具体事物，抽象出来的事物的本质 。比如平时学习的 &lt;em&gt;数学&lt;/em&gt;、&lt;em&gt;物理&lt;/em&gt;、&lt;em&gt;化学&lt;/em&gt; 知识，再比程序中的 &lt;em&gt;算法&lt;/em&gt;、分析解决问题的 &lt;em&gt;思维方式&lt;/em&gt; 等，都不会因时间和环境变化而不适用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;术&lt;/code&gt; 即 “ 技术 ”（技巧），是人们在具体工程实践中总结出来的一些技巧。比如 “The art of XXX” ，“The principle of XXX” 等 。&lt;/p&gt;
&lt;p&gt;是的，这本书既不是单独讲 &lt;code&gt;道&lt;/code&gt;，也不是单独讲 &lt;code&gt;术&lt;/code&gt;，而是将两者结合起来，让你不仅明白 &lt;em&gt;道&lt;/em&gt;  的深奥，也明白 &lt;em&gt;术&lt;/em&gt; 的精妙；让你体会到 &lt;em&gt;道&lt;/em&gt; 是如何在 &lt;em&gt;术&lt;/em&gt; 中实现，也体会到 &lt;em&gt;术&lt;/em&gt; 是如何在 &lt;em&gt;道&lt;/em&gt;   的约束下追求极限的 。更加关键的是全书都是用很平白的语言讲述，平白到 “ 即使完全不懂计算机的人也能读懂 ” 的地步，这就是其厉害之处了。&lt;/p&gt;
&lt;p&gt;就好像你学习了五花八门的心法秘籍和各式武功，每一门都厉害无比，可偏偏无法把这些武功融会贯通，修至大成 。这时候，你需要的不是一本《葵花宝典》，而是《论天下武功之间的关系及其融会贯通方法》，打通自己的任督二脉，也就是这本 &lt;a href="http://book.douban.com/subject/1494026/"&gt;Code&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;读这本书时，让我想起了在大学 4 年间读的各种课程：&lt;/p&gt;
&lt;p&gt;读到 第 6 章 “ 电报机与继电器 ” 让我想起 &lt;em&gt;大学物理&lt;/em&gt; ，虽然翘了很多课，但是电磁感应什么的有中学基础，还好没有忘记 。&lt;/p&gt;
&lt;p&gt;读到 第 7～9 章，书中对计数的方法和进制的讨论，让我想起 &lt;em&gt;大学计算机基础&lt;/em&gt; ，然后花了一天时间去把以前一知半解的 “ 原码、反码、补码 ” 仔细推敲总结一遍，收获颇大 。&lt;/p&gt;
&lt;p&gt;读到 第 10 章，布尔代数 让我想起 &lt;em&gt;离散数学&lt;/em&gt; ，尤其发人深醒的是布尔发明了 布尔逻辑 100 多年后， 才有人（香农）将其和电路联系起来 。&lt;/p&gt;
&lt;p&gt;读到 第 11～13 章，跟随作者的思路，我才明白当年令人痛不欲生的 &lt;em&gt;模拟电路&lt;/em&gt; 、&lt;em&gt;数字电路&lt;/em&gt;  到底是来干什么的，数字电路是如何从最基本的门搭建出来更强的功能的元器件的，联系前面学习的 编码的知识，明白这样做的道理 。&lt;/p&gt;
&lt;p&gt;读到 第 16～22 章，让我想起 &lt;em&gt;微机原理&lt;/em&gt; ，对微处理器的工作方式不再模糊不清，跟随着作者的思路搭建一台 “ 计算机 ”（当然和现在的计算机完全不同，但是原理是一模一样的），为自己搭建的处理器设计一套可以实现自动功能的编程语言，然后写一段程序，甚至一窥操作系统 。&lt;/p&gt;
&lt;p&gt;还有等等 ...&lt;/p&gt;
&lt;p&gt;胡扯了这么多，书固然是好书，但是更让人深思的是国内外教育的差异。吐槽我们的教育体制毫无意义，作为普通人，我们能做到的就是自己努力，找真正的好书、向真正的大师学习，比如上面提到过的&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read"&gt;What is the single most influential book every programmer should read?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了技术、还有很多程序员需要看的书。找到一本好书，然后 Let's start it!&lt;/p&gt;</content><category term="Book"></category><category term="Code"></category><category term="review"></category></entry></feed>